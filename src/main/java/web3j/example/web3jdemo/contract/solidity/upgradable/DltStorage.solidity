pragma solidity 0.4.23;

import "browser/Libs.sol";
import "browser/DltOwner.sol";

// 4,563,542
contract Storage is Owner, eventRegisterContractAware {

    using Arrays for address[];
    using Arrays for bytes32[];

    string public PERMITTED_CONTRACT_ROOT_KEY = 'contract.permitted.';

    mapping(bytes32 => uint)        private uIntStorage;
    mapping(bytes32 => address)     private addressStorage;
    mapping(bytes32 => bool)        private boolStorage;
    mapping(bytes32 => int)         private intStorage;

    mapping(bytes32 => address[])   private addressArrayStorage;
    mapping(bytes32 => bytes32[])   private bytes32ArrayStorage;

    constructor(address contractRegistratorAddress) public {
        require(contractRegistratorAddress != address(0x0));
        addressStorage[keccak256(PERMITTED_CONTRACT_ROOT_KEY, ContractType.CONTRACT_REGISTRATOR)] = contractRegistratorAddress;
        addressStorage[keccak256(PERMITTED_CONTRACT_ROOT_KEY, contractRegistratorAddress)] = contractRegistratorAddress;
        emit RegisterContract(
            ContractType.STORAGE,
            address(0x0),
            address(this));
    }

    /*public*/

    function getPermittedContractAddress(ContractType contractType) external view returns (address) {
        return addressStorage[keccak256(PERMITTED_CONTRACT_ROOT_KEY, contractType)];
    }

    function isPermittedContractAddress(address contractAddress) external view returns (bool) {
        return addressStorage[keccak256(PERMITTED_CONTRACT_ROOT_KEY, contractAddress)] == contractAddress;
    }

    /*Getter*/

    function getAddress(bytes32 key) external view returns (address) {
        return addressStorage[key];
    }

    function getUint(bytes32 key) external view returns (uint) {
        return uIntStorage[key];
    }

    function getBool(bytes32 _key) external view returns (bool) {
        return boolStorage[_key];
    }

    function getInt(bytes32 key) external view returns (int) {
        return intStorage[key];
    }

    function getAddressArray(bytes32 key) external view returns (address[]) {
        return addressArrayStorage[key];
    }

    function getBytes32Array(bytes32 key) external view returns (bytes32[]) {
        return bytes32ArrayStorage[key];
    }

    /*Setter*/

    function setAddress(bytes32 key, address value) onlyByLatestPermittedContractVersion external {
        addressStorage[key] = value;
    }

    function setUint(bytes32 key, uint value) onlyByLatestPermittedContractVersion external {
        uIntStorage[key] = value;
    }

    function setBool(bytes32 key, bool value) onlyByLatestPermittedContractVersion external {
        boolStorage[key] = value;
    }

    function setInt(bytes32 key, int value) onlyByLatestPermittedContractVersion external {
        intStorage[key] = value;
    }

    function pushAddressArray(bytes32 key, address value) onlyByLatestPermittedContractVersion external
        returns(uint)
    {
        return addressArrayStorage[key].push(value);
    }

    function pushBytes32Array(bytes32 key, bytes32 value) onlyByLatestPermittedContractVersion external
        returns(uint)
    {
        return bytes32ArrayStorage[key].push(value);
    }

    /*Delete*/

    function deleteAddress(bytes32 key)  onlyByLatestPermittedContractVersion external {
        delete addressStorage[key];
    }

    function deleteUint(bytes32 key) onlyByLatestPermittedContractVersion external {
        delete uIntStorage[key];
    }

    function deleteBool(bytes32 key) onlyByLatestPermittedContractVersion external {
        delete boolStorage[key];
    }

    function deleteInt(bytes32 key) onlyByLatestPermittedContractVersion external {
        delete intStorage[key];
    }

    function removeAddressArray(bytes32 key, address value) onlyByLatestPermittedContractVersion external
        returns(uint)
    {
        uint idx = addressArrayStorage[key].getArrayItemIndex(value);
        addressArrayStorage[key].removeArrayItem(idx);
        return addressArrayStorage[key].length;
    }

    function removeBytes32Array(bytes32 key, bytes32 value) onlyByLatestPermittedContractVersion external
        returns(uint)
    {
        uint idx = bytes32ArrayStorage[key].getArrayItemIndex(value);
        bytes32ArrayStorage[key].removeArrayItem(idx);
        return bytes32ArrayStorage[key].length;
    }

    /*service*/

    function moveIntValue(bytes32 keyFrom, bytes32 keyTo, int value) onlyByLatestPermittedContractVersion public {
        addIntValue(keyFrom, (-value));
        addIntValue(keyTo, value);
    }

    function addIntValue(bytes32 key, int value) onlyByLatestPermittedContractVersion public {
        require(value != 0);
        int currentValue = intStorage[key];
        int newValue = currentValue + value;
        require(newValue >= 0);
        intStorage[key] = newValue;
    }

    /*service.batch*/

    /*service.batch.uint*/

    function batchSetUintValue(bytes32[] key, uint[] value) onlyByLatestPermittedContractVersion external {
        require(key.length == value.length);
        for (uint i = 0; i<key.length; i++) {
            uIntStorage[key[i]] = value[i];
        }
    }

    function batchSetUintValue(bytes32[] key, uint value) onlyByLatestPermittedContractVersion external {
        for (uint i = 0; i<key.length; i++) {
            uIntStorage[key[i]] = value;
        }
    }

    /*service.batch.int*/

    function batchSetIntValue(bytes32[] key, int[] value) onlyByLatestPermittedContractVersion external {
        require(key.length == value.length);
        for (uint i = 0; i<key.length; i++) {
            intStorage[key[i]] = value[i];
        }
    }

    function batchSetIntValue(bytes32[] key, int value) onlyByLatestPermittedContractVersion external {
        for (uint i = 0; i<key.length; i++) {
            intStorage[key[i]] = value;
        }
    }

    function batchMoveIntValue(bytes32[] keyFrom, bytes32[] keyTo, int[] value) onlyByLatestPermittedContractVersion external {
        require(keyFrom.length == keyTo.length);
        require(keyTo.length == value.length);
        for (uint i = 0; i<value.length; i++) {
            moveIntValue(keyFrom[i], keyTo[i], value[i]);
        }
    }

    function batchMoveIntValue(bytes32 keyFrom, bytes32[] keyTo, int[] value) onlyByLatestPermittedContractVersion external {
        require(keyTo.length == value.length);
        for (uint i = 0; i<value.length; i++) {
           moveIntValue(keyFrom, keyTo[i], value[i]);
        }
    }

    function batchMoveIntValue(bytes32[] keyFrom, bytes32 keyTo, int[] value) onlyByLatestPermittedContractVersion external {
        require(keyFrom.length == value.length);
        for (uint i = 0; i<value.length; i++) {
            moveIntValue(keyFrom[i], keyTo, value[i]);
        }
    }

    /*service.batch.bool*/

    function batchFindFirst(bytes32[] key, bool value) view onlyByLatestPermittedContractVersion external
        returns(bytes32)
    {
        for (uint i = 0; i<key.length; i++) {
            if (boolStorage[key[i]] == value) {
                return key[i];
            }
        }
        return bytes32(0);
    }

    function batchSetBoolValue(bytes32[] key, bool[] value) onlyByLatestPermittedContractVersion external {
        require(key.length == value.length);
        for (uint i = 0; i<key.length; i++) {
            boolStorage[key[i]] = value[i];
        }
    }

    function batchSetBoolValue(bytes32[] key, bool value) onlyByLatestPermittedContractVersion external {
        for (uint i = 0; i<key.length; i++) {
            boolStorage[key[i]] = value;
        }
    }

    /*service.batch.pushToArray*/

    function batchPushAddressArray(bytes32 key, address[] value) onlyByLatestPermittedContractVersion external
        returns(uint)
    {
        for (uint i = 0; i<value.length; i++) {
            return addressArrayStorage[key].push(value[i]);
        }
    }

    /*Modifier*/

    modifier onlyByLatestPermittedContractVersion() {
        require(addressStorage[keccak256(PERMITTED_CONTRACT_ROOT_KEY, msg.sender)] != address(0x0));
        _;
    }

}
