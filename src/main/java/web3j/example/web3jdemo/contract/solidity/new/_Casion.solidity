pragma solidity ^0.4.23;

import 'browser/_Ownable.sol';
import 'browser/_Fee.sol';
import 'browser/_SafeMath.sol';
import 'browser/_Arrays.sol';

contract BasicToken is Ownable {

    using SafeMath for uint256;

    uint256 internal maxSupply_;
    uint256 internal totalSupply_;

    function totalSupply() public view returns(uint256);
    function setTotalSupply(uint256 amount) internal;

    function maxSupply() public view returns(uint256);
}

contract ManagingUser is BasicToken {

    enum ParticipantKind {
        ADMIN, CASINO, USER
    }

    uint32 internal adminReservedTypeBound = 1000;
    uint32 internal casinoReservedTypeBound = 2000;

    struct LinkedUserData {
        address prev;
        address next;
        bool    active;
        ParticipantKind userKind;
        uint32  userType;
        uint256 balance;
        uint256 balanceReserved;
    }

    uint256 public usersNumber;
    address internal firstUserAddress;
    address internal lastUserAddress;
    mapping(address => LinkedUserData) internal users;

    event ParticipantRegister(
        ParticipantKind pkKind,
        address registeredAddress,
        uint count,
        string details
        );

    /*restricted*/

    function registerParticipant(address _address, uint32 _type) internal
        onlyAdmin
    {
        require(_address != address(0));
        require(_type != 0);
        require(users[_address].userType == 0);

        address prev;

        if (firstUserAddress == address(0)) {
            prev = address(0x0);
            firstUserAddress = _address;
        } else {
            prev = lastUserAddress;
            users[lastUserAddress].next = _address;
        }

        users[_address] = LinkedUserData(
            prev,
            address(0),
            true,
            resolveUserKind(_type),
            _type,
            0,
            0);

        lastUserAddress = _address;
        usersNumber++;
    }

    function resolveUserKind(uint32 userType) internal view
        returns(ParticipantKind)
    {
        return userType > casinoReservedTypeBound
                ? ParticipantKind.USER
                : userType > adminReservedTypeBound
                ? ParticipantKind.CASINO
                : ParticipantKind.ADMIN;
    }

    function registeredAddressesAll(uint256 count) external view
        returns(address[])
    {
        return registeredAddresses(address(0), count);
    }

    function registeredAddressesAll(address startAddress, uint256 count) external view
        returns(address[])
    {
        return registeredAddresses(startAddress, count);
    }

    function registeredAddresses(address startAddress, uint256 count) internal view
        onlyOwner
        returns(address[])
    {
        address currentAddress = startAddress == address(0)
                ? currentAddress = firstUserAddress
                : startAddress;

        address[] memory result = new address[](count);
        uint256 idx = 0;
        for (LinkedUserData memory user = users[currentAddress];
                user.userType != 0 && idx < count;
                user = users[currentAddress]) {
            result[idx] = currentAddress;
            currentAddress = user.next;
            idx++;
        }

        return result;
    }

    function registerAdmin(address adminAddress, uint32 adminType, string details) external
        onlyOwner
    {
        require(adminType <= adminReservedTypeBound);
        registerParticipant(adminAddress, adminType);

        emit ParticipantRegister (
            ParticipantKind.ADMIN,
            adminAddress,
            usersNumber,
            details
        );
    }

    function registerCasino(address casinoAddress, uint32 casinoType, string details) external
        onlyOwner
    {
        require(casinoType > adminReservedTypeBound && casinoType <= casinoReservedTypeBound);
        registerParticipant(casinoAddress, casinoType);

        emit ParticipantRegister (
            ParticipantKind.CASINO,
            casinoAddress,
            usersNumber,
            details
        );
    }

    function registerUser(address userAddress, uint32 userType, string details) external
        onlyAdmin
    {
        require(userType > casinoReservedTypeBound);
        registerParticipant(userAddress, userType);

        emit ParticipantRegister (
            ParticipantKind.USER,
            userAddress,
            usersNumber,
            details
        );
    }

    function setAdminTypeFor(address adminAddress, uint32 adminType) external
        onlyOwner
    {
        require(adminType <= adminReservedTypeBound);
        require(users[adminAddress].userType <= adminReservedTypeBound);
        users[adminAddress].userType = adminType;
    }

    function setCasionTypeFor(address casinoAddress, uint32 casinoType) external
        onlyAdmin
    {
        require(casinoType > adminReservedTypeBound && casinoType <= casinoReservedTypeBound);
        require(users[casinoAddress].userType > adminReservedTypeBound
                && users[casinoAddress].userType <= casinoReservedTypeBound);
        users[casinoAddress].userType = casinoType;
    }

    function setUserTypeFor(address userAddress, uint32 userType) external
        onlyAdmin
    {
        require(userType > casinoReservedTypeBound);
        require(users[userAddress].userType > casinoReservedTypeBound);
        users[userAddress].userType = userType;
    }

    function setAdminActiveFor(address adminAddress, bool active) external
        onlyOwner
    {
        users[adminAddress].active = active;
    }

    function setCasionActiveFor(address casinoAddress, bool active) external
        onlyAdmin
    {
        users[casinoAddress].active = active;
    }

    function setUserTypeFor(address userAddress, bool active) external
        onlyAdmin
    {
        users[userAddress].active = active;
    }

    /*public*/

    function typeOf(address _address) external view
        returns(uint32)
    {
        return users[_address].userType;
    }

    function activeOf(address _address) public view
        returns(bool)
    {
        return users[_address].active;
    }

    /*modifier*/

    modifier onlyAdmin() {
        if (msg.sender != owner) {
            require (users[msg.sender].userType <= adminReservedTypeBound);
        }
        _;
    }

    modifier onlyCasino() {
        if (msg.sender != owner) {
            require (  users[msg.sender].userType > adminReservedTypeBound
                    && users[msg.sender].userType <= casinoReservedTypeBound);
        }
        _;
    }
}

contract ManagingFee is Ownable {

     Fee internal fee;

     function registerFeeContract(address feeContractAddress) external
        onlyOwner
     {
         fee = Fee(feeContractAddress);
         require(fee.feeRulesVerified());
     }
}

contract Documenting {

    using Arrays for bytes32[];
    using Strings for string;

    mapping(address=>mapping(bytes32=>uint256)) internal docLogs;
    mapping(address=>bytes32[]) internal docLogsList;

    function documentsUIDs(address _address) public view
        returns (bytes32[] documentUIDs)
    {
        return docLogsList[_address];
    }

    function documentExists(address _address, string documentUID) public view
        returns(bool)
    {
        return documentAmount(_address, documentUID) != 0;
    }

    function documentAmount(address _address, string documentUID) public view
        returns(uint256)
    {
        return docLogs[_address][documentHash(documentUID)];
    }

    function addDocument(address _address, uint amount, string documentUID) internal
    {
        require(bytes(documentUID).length != 0);
        require(bytes(documentUID).length <= 32);
        require(amount > 0);
        require(!documentExists(_address, documentUID));
        bytes32 documentUIDHash = documentHash(documentUID);
        docLogs[_address][documentUIDHash] = amount;
        docLogsList[_address].push(documentUIDHash);
    }

    function removeDocument(address _address, string documentUID) internal
    {
        require(documentExists(_address, documentUID));
        bytes32 documentUIDHash = documentHash(documentUID);
        uint256 idx = docLogsList[_address].find(documentUIDHash);
        assert(idx != uint(-1));
        docLogsList[_address].remove(idx);
        delete docLogs[_address][documentUIDHash];
    }

    function documentHash(string document) internal pure
        returns(bytes32)
    {
        return document.stringToBytes32();
    }
}

contract OperatingUser is ManagingUser {

    function incBalance(address userAddress, uint256 amount) internal
        onlyForActiveUser(userAddress)
    {
        users[userAddress].balance.add(amount);
    }

    function decBalance(address userAddress, uint256 amount) internal
        onlyForActiveUser(userAddress)
    {
        users[userAddress].balance.sub(amount);
    }

    function incBalanceReserved(address userAddress, uint256 amount) internal
        onlyForActiveUser(userAddress)
    {
        users[userAddress].balanceReserved.add(amount);
    }

    function decBalanceReserved(address userAddress, uint256 amount) internal
        onlyForActiveUser(userAddress)
    {
        users[userAddress].balanceReserved.sub(amount);
    }

    modifier onlyForActiveUser(address userAddress) {
        require (activeOf(userAddress));
        _;
    }

}

contract Enrolling is Documenting, OperatingUser {

    event RegisterEnrollDocument(
        address user,
        string documentUID,
        uint256 amount,
        string details
        );

    event Mint(
        address user,
        uint256 amount,
        string documentUID,
        string details
        );

    function registerEnrollRequest(address userAddress, uint256 amount, string documentUID, string details) external
        onlyAdmin
    {
        require(users[userAddress].userKind == ParticipantKind.USER);
        addDocument(userAddress, amount, documentUID);

        emit RegisterEnrollDocument(
            userAddress,
            documentUID,
            amount,
            details);
    }

    function enroll(address userAddress, string documentUID, string details) external
        onlyAdmin
    {
        uint256 currentTotalSupply = totalSupply();
        uint256 amount = documentAmount(userAddress, documentUID);
        require(currentTotalSupply + amount <= maxSupply());
        setTotalSupply(currentTotalSupply.add(amount));

        removeDocument(userAddress, documentUID);

        incBalance(userAddress, amount);

        emit Mint(
            userAddress,
            amount,
            documentUID,
            details);
    }

}

contract Withdrowin is Documenting, OperatingUser {

    event RegisterWithdrawDocument(
        address user,
        string documentUID,
        uint256 amount,
        string details
        );

    event Burn(
        address user,
        uint256 amount,
        string documentUID,
        string details
        );

    function registerWithdrawRequest(address userAddress, uint256 amount, string documentUID, string details) external
        onlyAdmin
    {
        require(users[userAddress].userKind == ParticipantKind.USER);
        addDocument(userAddress, amount, documentUID);

        decBalance(userAddress, amount);
        incBalanceReserved(userAddress, amount);

        emit RegisterWithdrawDocument(
            userAddress,
            documentUID,
            amount,
            details);
    }

    function withdraw(address userAddress, string documentUID, string details) external
        onlyAdmin
    {
        uint256 currentTotalSupply = totalSupply();
        uint256 amount = documentAmount(userAddress, documentUID);
        setTotalSupply(currentTotalSupply.sub(amount));

        removeDocument(userAddress, documentUID);

        decBalanceReserved(userAddress, amount);

        emit Burn(
            userAddress,
            amount,
            documentUID,
            details);
    }

}

contract Casion is OperatingUser, ManagingFee {

    function balanceOf(address _address) external view
        returns (uint256)
    {
        return users[_address].balance;
    }

    function balanceResirvedOf(address _address) external view
        returns (uint256)
    {
        return users[_address].balance;
    }

    function maxSupply() public view
        returns (uint256)
    {
        return maxSupply_;
    }

    function totalSupply() public view
        returns (uint256)
    {
        return totalSupply_;
    }

    function setTotalSupply(uint256 amount) internal {
        totalSupply_ = amount;
    }

    function transferFrom(address _from, address _to, int amount, string details) external
        onlyAdmin
    {
        // transferFromTo(_from, _to, amount, details);
    }


    function getFeeValue(address sender, address receiver, uint256 amount) external view returns(uint256 result){
        result = fee.countFee(
                users[sender].userType,
                users[receiver].userType,
                amount
            );
        assert(result != uint256(-1));
    }

}