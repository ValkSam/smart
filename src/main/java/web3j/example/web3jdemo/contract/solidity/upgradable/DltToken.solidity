pragma solidity ^0.4.23;

import "browser/DltStorage.sol";
import "browser/Libs.sol";
import "browser/Events.sol";
import "browser/DltAdmin.sol";
import "browser/DltCasino.sol";
import "browser/DltUser.sol";

contract BaseToken  {

    string internal ROOT_KEY = 'token.';
    bytes32 internal TOTAL_SYPPLY_KEY_HASH = keccak256(ROOT_KEY, 'ERC20.totalSupply');

    Storage internal _storage;

}

contract Erc20Token is BaseToken, eventTransferAware {

    constructor (address storageContractAddress, string _name, string _symbol, int _maxSupply, int8 _decimals) public {
        _storage = Storage(storageContractAddress);
        require(msg.sender == _storage.owner());
        name = _name;
        symbol = _symbol;
        maxSupply = _maxSupply;
        decimals = _decimals;
    }

    /*ERC20 ... */

    string public name;
    string public symbol;
    int public maxSupply;
    int8 public decimals;

    function totalSupply() public view returns(int) {
        return _storage.getInt(TOTAL_SYPPLY_KEY_HASH);
    }

    function balanceOf(address userAddress) external view returns(int) {
        return getUserContract().balanceOf(userAddress);
    }

    function transfer(address _to, int amount, string details) external {
        address _from = msg.sender;
        transferFromTo(_from, _to, amount, details);
    }

    function transferFrom(address _from, address _to, int amount, string details) external
        onlyByAdmin
    {
        transferFromTo(_from, _to, amount, details);
    }

    function approve(address _spender, int amount) external pure returns (bool success) {
        return false; //not supported
    }

    function allowance(address userAddress, address _spender) external view returns (int) {
        address adminAddress = _storage.getPermittedContractAddress(ContractType.ADMIN);
        Admin admin = Admin(adminAddress);
        if (admin.isAdmin(_spender)) {
            return getUserContract().balanceOf(userAddress);
        } else {
            return 0;
        }
    }

    /* ... ERC20*/

    /*private section*/

    function getUserContract() internal view returns(User) {
        address userAddress = _storage.getPermittedContractAddress(ContractType.USER);
        return User(userAddress);
    }

    function transferFromTo(address _from, address _to, int amount, string details) private  {
        require(amount > 0);

        User user = getUserContract();

        user.balanceChange(_from, (-amount));
        user.balanceChange(_to, amount);

        emit Transfer(
            _from,
            _to,
            TransactionType.TRANSFER,
            amount,
            details);
    }

    /*modifier*/

    modifier onlyByAdmin() {
        if (msg.sender != _storage.owner()) {
            address adminAddress = _storage.getPermittedContractAddress(ContractType.ADMIN);
            Admin admin = Admin(adminAddress);
            require (admin.isAdmin(msg.sender));
        }
        _;
    }

}

contract Token is Erc20Token, eventRegisterAware, eventExchangeAware, eventMintAware, eventRegisterDocumentAware {

    constructor (address storageContractAddress, string _name, string _symbol, int _maxSupply, int8 _decimals)
        Erc20Token(storageContractAddress, _name, _symbol, _maxSupply, _decimals)
        public {}

    /*public*/

    function isLatestVersion() external view
        returns (bool) {
        return _storage.isPermittedContractAddress(address(this));
    }

    function checkContractType(ContractType contractType) external pure {
        require(contractType == ContractType.TOKEN);
    }

    /*admin permissions*/

    function registerEnrollRequestDocument(address userAddress, int amount, string documentUID, string details) external
        onlyByAdmin
    {
        User user = getUserContract();
        user.addDocument(userAddress, documentUID, amount);

        emit RegisterDocument(
            TransactionType.ENROLL_REQUEST,
            userAddress,
            documentUID,
            amount,
            details);
    }

    function cancelEnrollRequestDocument(address userAddress, int amount, string documentUID, string details) external
        onlyByAdmin
    {
        User user = getUserContract();
        user.removeDocument(userAddress, documentUID);

        emit RegisterDocument(
            TransactionType.CANCEL_ENROLL_REQUEST,
            userAddress,
            documentUID,
            amount,
            details);
    }

    function registerWithdrawRequestDocument(address userAddress, int amount, string documentUID, string details) external
        onlyByAdmin
    {
        User user = getUserContract();
        user.addDocument(userAddress, documentUID, amount);
        user.balanceChange(userAddress, (-amount));
        user.balanceReservedChange(userAddress, amount);

        emit RegisterDocument(
            TransactionType.WITHDRAW_REQUEST,
            userAddress,
            documentUID,
            amount,
            details);
    }

    function enroll(address userAddress, int amount, string documentUID, string details) external
        onlyByAdmin
    {
        require(amount > 0);
        int currentTotalSupply = totalSupply();
        require(currentTotalSupply + amount <= maxSupply);

        User user = getUserContract();
        user.removeDocument(userAddress, documentUID);

        user.balanceChange(userAddress, amount);
        setTotalSupply(currentTotalSupply + amount);

        emit Mint(
            TransactionType.ENROLL,
            userAddress,
            amount,
            documentUID,
            details);
    }

    function withdraw(address userAddress, int amount, string documentUID, string details) external
        onlyByAdmin
    {
        require(amount > 0);
        int currentTotalSupply = totalSupply();
        assert(currentTotalSupply - amount >= 0);

        User user = getUserContract();
        user.removeDocument(userAddress, documentUID);

        user.balanceReservedChange(userAddress, (-amount));
        setTotalSupply(currentTotalSupply - amount);

        emit Burn(
            TransactionType.WITHDRAW,
            userAddress,
            amount,
            documentUID,
            details);
    }

    function depositCoin(address userAddress, address casinoAddress, int amount, string documentUID, string details) public
        onlyByAdmin
    {
        exchangeCoin(TransactionType.DEPOSIT, userAddress, casinoAddress, amount, documentUID, details);
    }

    function takeCoin(address userAddress, address casinoAddress, int amount, string documentUID, string details) public
        onlyByAdmin
    {
        exchangeCoin(TransactionType.TAKE, userAddress, casinoAddress, amount, documentUID, details);
    }

    /*private section*/

    function exchangeCoin(TransactionType transactionType, address userAddress, address casinoAddress, int amount, string documentUID, string details) private {
        require(amount > 0);

        Casino casino = getCasinoContract();
        User user = getUserContract();

        if (transactionType == TransactionType.DEPOSIT){
            casino.balanceChange(casinoAddress, amount);
            user.balanceChange(userAddress, (-amount));
        } else if (transactionType == TransactionType.TAKE) {
            casino.balanceChange(casinoAddress, (-amount));
            user.balanceChange(userAddress, amount);
        } else {
            revert();
        }

        emit Exchange(
            transactionType,
            userAddress,
            casinoAddress,
            amount,
            documentUID,
            details);
    }

    function getAdminContract() private view returns(Admin) {
        address adminAddress = _storage.getPermittedContractAddress(ContractType.ADMIN);
        return Admin(adminAddress);
    }

    function getCasinoContract() private view returns(Casino) {
        address casinoAddress = _storage.getPermittedContractAddress(ContractType.CASINO);
        return Casino(casinoAddress);
    }

    function setTotalSupply(int amount) private {
        _storage.setInt(TOTAL_SYPPLY_KEY_HASH, amount);
    }


}
