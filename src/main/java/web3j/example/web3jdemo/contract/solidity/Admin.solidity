pragma solidity ^0.4.23;

import "browser/Events.sol";

contract Owned is eventSetOwnershipAware {
    address public owner;
    address private newOwner;
    string private details;

    constructor () public {
        owner = msg.sender;
        emit SetOwnership(
            TransactionType.SET_OWNER,
            address(0x0),
            owner,
            "init");
    }

    function setOwnership(address newOwnerAddress, string _details) public
        onlyByOwner
    {
        newOwner = newOwnerAddress;
        details = _details;
    }

    function acceptOwnership() public
        onlyByNewOwner
    {
        owner = newOwner;
        newOwner = address(0x0);
        emit SetOwnership(
            TransactionType.SET_OWNER,
            owner,
            newOwner,
            details);
    }

    modifier onlyByOwner {
        require(msg.sender == owner);
        _;
    }

    modifier onlyByNewOwner {
        require(msg.sender == newOwner);
        _;
    }

}

contract Admin is Owned, eventSetAddAdminAware {

    mapping (address => bool) admins;
    address[] adminsIndex;

    constructor () public{
        admins[msg.sender] = true;
        adminsIndex.push(msg.sender);
        emit AddAdmin(
            TransactionType.REGISTER_ADMIN,
            msg.sender,
            adminsIndex.length,
            "init"
        );
    }

    function register(address newAdminAddress, string details) public
        onlyByOwner
    {
        admins[newAdminAddress] = true;
        adminsIndex.push(newAdminAddress);
        emit AddAdmin(
            TransactionType.REGISTER_ADMIN,
            newAdminAddress,
            adminsIndex.length,
            details
        );
    }

    function isAdmin(address adminAddress) public view returns(bool){
        return admins[adminAddress];
    }

}