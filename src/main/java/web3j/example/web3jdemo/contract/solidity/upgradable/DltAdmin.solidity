pragma solidity ^0.4.23;

import "browser/DltStorage.sol";
import "browser/Events.sol";

contract Admin is typeAware, eventRegisterAware {

    string private ROOT_KEY = 'admin.';

    Storage private _storage;

    constructor (address storageContractAddress) public {
        _storage = Storage(storageContractAddress);
        require(msg.sender == _storage.owner());
    }

    /*public*/

    function isLatestVersion() external view
        returns (bool) {
        return _storage.isPermittedContractAddress(address(this));
    }

    function isAdmin(address _address) external view
        returns(bool)
    {
        return _storage.getBool(keccak256(ROOT_KEY, _address));
    }

    function checkContractType(ContractType contractType) external pure
        returns (bool)
    {
        require(contractType == ContractType.ADMIN);
        return true;
    }

    /*owner permissions*/

    function register(address adminAddress, string details) external
        onlyByOwner
    {
        require(!exists(adminAddress));
        _storage.setBool(keccak256(ROOT_KEY, adminAddress), true);
        uint numberOfAdmins = _storage.pushAddressArray(keccak256(ROOT_KEY, '.index'), adminAddress);

        emit Register(
            TransactionType.REGISTER_ADMIN,
            adminAddress,
            numberOfAdmins,
            details
        );
    }

    /*token permissions*/

    /*private section*/

    function exists(address _address) private view returns(bool) {
        return _storage.getBool(keccak256(ROOT_KEY, _address));
    }

    /*Modifier*/

    modifier onlyByOwner {
        require(msg.sender == _storage.owner());
        _;
    }

    modifier onlyByLatestTokenContractVersion() {
        require(_storage.getPermittedContractAddress(ContractType.TOKEN) == msg.sender);
        _;
    }

}