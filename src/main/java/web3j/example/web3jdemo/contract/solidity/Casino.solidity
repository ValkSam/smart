pragma solidity ^0.4.23;

import "browser/Libs.sol";
import "browser/Events.sol";
import "browser/Admin.sol";

contract Casino is eventRegisterAware {

    using Arrays for address[];

    Admin admin;

    struct CasinoData {
        bool isActive;
        uint amount;
    }

    mapping(address => CasinoData) casinos;
    address[] casinosIndex;

    constructor (address adminContractAddress) public {
        admin = Admin(adminContractAddress);
    }

    function register(address casinoAddress, string details) public
        onlyByAdmin()
    {
        require(casinosIndex.getArrayItemIndex(casinoAddress) == uint(-1));

        casinosIndex.push(casinoAddress);
        casinos[casinoAddress] = CasinoData(
            {
                isActive: true,
                amount: 0
            });

        emit Register(
            TransactionType.REGISTER_CASINO,
            casinoAddress,
            details);
    }

    function exists(address casinoAddress) public view returns(bool) {
        return casinos[casinoAddress].isActive;
    }

    function balanceOf(address casinoAddress) public view returns(uint) {
        return casinos[casinoAddress].amount;
    }

    function balanceChange(address casinoAddress, uint amount) public {
        casinos[casinoAddress].amount += amount;
    }

    modifier onlyByAdmin() {
        require (admin.isAdmin(msg.sender));
        _;
    }

}