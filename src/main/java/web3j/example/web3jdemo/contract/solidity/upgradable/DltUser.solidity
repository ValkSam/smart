pragma solidity ^0.4.23;

import "browser/DltStorage.sol";
import "browser/DltAdmin.sol";
import "browser/Libs.sol";
import "browser/Events.sol";

contract User is typeAware, eventRegisterAware {

    using Arrays for bytes32[];
    using Strings for string;

    string private ROOT_KEY = 'user.';

    Storage private _storage;

    constructor (address storageContractAddress) public {
        _storage = Storage(storageContractAddress);
        require(msg.sender == _storage.owner());
    }

    /*public*/

    function isLatestVersion() external view
        returns (bool) {
        return _storage.isPermittedContractAddress(address(this));
    }

    function isUser(address _address) external view
        returns(bool)
    {
        return exists(_address);
    }

    function isActive(address userAddress) external view
        returns(bool){
        return active(userAddress);
    }

    function checkContractType(ContractType contractType) external pure
        returns (bool)
    {
        require(contractType == ContractType.USER);
        return true;
    }

    function balanceOf(address userAddress) external view
        returns(int)
    {
        require(exists(userAddress));
        return _storage.getInt(keccak256(ROOT_KEY, userAddress, '.balance'));
    }

    function balanceReservedOf(address userAddress) external view
        returns(int)
    {
        require(exists(userAddress));
        return _storage.getInt(keccak256(ROOT_KEY, userAddress, '.balance.reserved'));
    }

    /*admin permission*/

    function register(address userAddress, string details) external
        onlyByAdmin
    {
        require(!exists(userAddress));
        _storage.setBool(keccak256(ROOT_KEY, userAddress), true);
        _storage.pushAddressArray(keccak256(ROOT_KEY, '.index'), userAddress);

        _storage.setBool(keccak256(ROOT_KEY, userAddress, '.active'), true);
        _storage.setInt(keccak256(ROOT_KEY, userAddress, '.balance'), 0);
        _storage.setInt(keccak256(ROOT_KEY, userAddress, '.balance.reserved'), 0);

        emit Register(
            TransactionType.REGISTER_USER,
            userAddress,
            _storage.getAddressArray(keccak256(ROOT_KEY, '.index')).length,
            details
        );
    }

    function activate(address userAddress) external
        returns(bool)
    {
        setActive(userAddress, true);
        return true;
    }

    function deActivate(address userAddress) external
        returns(bool)
    {
        setActive(userAddress, false);
        return true;
    }

    function documentAmount(address userAddress, string documentUID) external view
        returns(int){
        return _storage.getInt(keccak256(ROOT_KEY, userAddress, '.document.', documentUID));
    }

    function documentsUIDs(address userAddress) external view
        returns (bytes32[] documentUIDs)
    {
        return _storage.getBytes32Array(keccak256(ROOT_KEY, userAddress, '.document.index'));
    }

    /*token permissions*/

    function balanceChange(address userAddress, int amount) external
        onlyByLatestTokenContractVersion
        onlyForActiveUser(userAddress)
    {
        require(exists(userAddress));
        bytes32 key = keccak256(ROOT_KEY, userAddress, '.balance');
        balanceChange (key, amount);
    }

    function balanceReservedChange(address userAddress, int amount) external
        onlyByLatestTokenContractVersion
        onlyForActiveUser(userAddress)
    {
        require(exists(userAddress));
        bytes32 key = keccak256(ROOT_KEY, userAddress, '.balance.reserved');
        balanceChange(key, amount);
    }

    function balanceMove(address userAddressFrom, address userAddressTo, int amount) external
        onlyByLatestTokenContractVersion
        onlyForActiveUser(userAddressFrom)
        onlyForActiveUser(userAddressTo)
    {
        require(exists(userAddressFrom));
        require(exists(userAddressTo));
        bytes32 keyFrom = keccak256(ROOT_KEY, userAddressFrom, '.balance');
        bytes32 keyTo = keccak256(ROOT_KEY, userAddressTo, '.balance');
        _storage.moveIntValue(keyFrom, keyTo, amount);
    }

    function addDocument(address userAddress, string documentUID, int amount) external
        onlyByLatestTokenContractVersion
        onlyForActiveUser(userAddress)
        returns(bool)
    {
        require(bytes(documentUID).length != 0);
        require(bytes(documentUID).length <= 32);
        require(amount > 0);
        require(!documentExists(userAddress, documentUID));
        _storage.setInt(keccak256(ROOT_KEY, userAddress, '.document.', documentUID), amount);
        _storage.pushBytes32Array(keccak256(ROOT_KEY, userAddress, '.document.index'), documentUID.stringToBytes32());
        return true;
    }

    function removeDocument(address userAddress, string documentUID) external
        onlyByLatestTokenContractVersion
        onlyForActiveUser(userAddress)
        returns(bool)
    {
        require(documentExists(userAddress, documentUID));
        uint idx = _storage.getBytes32Array(keccak256(ROOT_KEY, userAddress, '.document.index')).getArrayItemIndex(documentUID.stringToBytes32());
        assert(idx != uint(-1));
        _storage.deleteInt(keccak256(ROOT_KEY, userAddress, '.document.', documentUID));
        _storage.removeBytes32Array(keccak256(ROOT_KEY, userAddress, '.document.index'), documentUID.stringToBytes32());
        return true;
    }

    /*private section*/

    function balanceChange(bytes32 key, int amount) private {
        require(amount != 0);
        int currentBalance = _storage.getInt(key);
        int newBalance = currentBalance + amount;
        require(newBalance >= 0);
        _storage.setInt(key, newBalance);
    }

    function exists(address _address) private view returns(bool){
        return _storage.getBool(keccak256(ROOT_KEY, _address));
    }

    function active(address userAddress) private view returns(bool){
        return _storage.getBool(keccak256(ROOT_KEY, userAddress, '.active'));
    }

    function setActive(address userAddress, bool value) private
        onlyByAdmin
    {
        _storage.setBool(keccak256(ROOT_KEY, userAddress, '.active'), value);
    }

    function documentExists(address userAddress, string documentUID) private view returns(bool) {
        return _storage.getInt(keccak256(ROOT_KEY, userAddress, '.document.', documentUID)) != 0;
    }

    /*Modifier*/

    modifier onlyByAdmin() {
        if (msg.sender != _storage.owner()) {
            address adminAddress = _storage.getPermittedContractAddress(ContractType.ADMIN);
            Admin admin = Admin(adminAddress);
            require (admin.isAdmin(msg.sender));
        }
        _;
    }

    modifier onlyForActiveUser(address indexAddress) {
        require (active(indexAddress));
        _;
    }

    modifier onlyByLatestTokenContractVersion() {
        require(_storage.getPermittedContractAddress(ContractType.TOKEN) == msg.sender);
        _;
    }


}
