pragma solidity ^0.4.23;

import "browser/DltStorage.sol";
import "browser/DltAdmin.sol";
import "browser/Libs.sol";
import "browser/Events.sol";

// 4,272,772
contract User is typeAware, eventRegisterAware {

    using Arrays for bytes32[];
    using Strings for string;

    string public ROOT_KEY = 'user.';
    string public ACTIVE_SUFFIX_KEY = '.active';
    string public BALANCE_SUFFIX_KEY = '.balance';
    string public BALANCE_RESERVED_SUFFIX_KEY = '.balance.reserved';

    Storage private _storage;

    constructor (address storageContractAddress) public {
        _storage = Storage(storageContractAddress);
        require(msg.sender == _storage.owner());
    }

    /*public*/

    function isLatestVersion() external view
        returns (bool) {
        return _storage.isPermittedContractAddress(address(this));
    }

    function isUser(address _address) external view
        returns(bool)
    {
        return exists(_address);
    }

    function isActive(address userAddress) external view
        returns(bool){
        return active(userAddress);
    }

    function checkContractType(ContractType contractType) external pure
        returns (bool)
    {
        require(contractType == ContractType.USER);
        return true;
    }

    function balanceOf(address userAddress) external view
        returns(int)
    {
        require(exists(userAddress));
        return _storage.getInt(keccak256(ROOT_KEY, userAddress, BALANCE_SUFFIX_KEY));
    }

    function balanceReservedOf(address userAddress) external view
        returns(int)
    {
        require(exists(userAddress));
        return _storage.getInt(keccak256(ROOT_KEY, userAddress, BALANCE_RESERVED_SUFFIX_KEY));
    }

   function documentAmount(address userAddress, string documentUID) external view
        returns(int){
        return _storage.getInt(keccak256(ROOT_KEY, userAddress, '.document.', documentUID));
    }

    function documentsUIDs(address userAddress) external view
        returns (bytes32[] documentUIDs)
    {
        return _storage.getBytes32Array(keccak256(ROOT_KEY, userAddress, '.document.index'));
    }

    /*token permissions*/

    function balanceChange(address userAddress, int amount) external
        onlyByLatestTokenContractVersion
        onlyForActiveUser(userAddress)
    {
        bytes32 key = keccak256(ROOT_KEY, userAddress, BALANCE_SUFFIX_KEY);
        _storage.addIntValue(key, amount);
    }

    function balanceReservedChange(address userAddress, int amount) external
        onlyByLatestTokenContractVersion
        onlyForActiveUser(userAddress)
    {
        bytes32 key = keccak256(ROOT_KEY, userAddress, BALANCE_RESERVED_SUFFIX_KEY);
         _storage.addIntValue(key, amount);
    }

    function balanceReserve(address userAddress, int amount) external
        onlyByLatestTokenContractVersion
        onlyForActiveUser(userAddress)
    {
        bytes32 keyFrom = keccak256(ROOT_KEY, userAddress, BALANCE_SUFFIX_KEY);
        bytes32 keyTo = keccak256(ROOT_KEY, userAddress, BALANCE_RESERVED_SUFFIX_KEY);
        _storage.moveIntValue(keyFrom, keyTo, amount);
    }

    function balanceRestore(address userAddress, int amount) external
        onlyByLatestTokenContractVersion
        onlyForActiveUser(userAddress)
    {
        bytes32 keyFrom = keccak256(ROOT_KEY, userAddress, BALANCE_RESERVED_SUFFIX_KEY);
        bytes32 keyTo = keccak256(ROOT_KEY, userAddress, BALANCE_SUFFIX_KEY);
        _storage.moveIntValue(keyFrom, keyTo, amount);
    }

    function balanceMove(address userAddressFrom, address userAddressTo, int amount) external
        onlyByLatestTokenContractVersion
        onlyForActiveUser(userAddressFrom)
        onlyForActiveUser(userAddressTo)
    {
        bytes32 keyFrom = keccak256(ROOT_KEY, userAddressFrom, BALANCE_SUFFIX_KEY);
        bytes32 keyTo = keccak256(ROOT_KEY, userAddressTo, BALANCE_SUFFIX_KEY);
        _storage.moveIntValue(keyFrom, keyTo, amount);
    }

    function addDocument(address userAddress, string documentUID, int amount) external
        onlyByLatestTokenContractVersion
        onlyForActiveUser(userAddress)
        returns(uint)
    {
        require(bytes(documentUID).length != 0);
        require(bytes(documentUID).length <= 32);
        require(amount > 0);
        require(!documentExists(userAddress, documentUID));
        _storage.setInt(keccak256(ROOT_KEY, userAddress, '.document.', documentUID), amount);
        uint numberOfUserDocs = _storage.pushBytes32Array(keccak256(ROOT_KEY, userAddress, '.document.index'), documentUID.stringToBytes32());
        return numberOfUserDocs;
    }

    function removeDocument(address userAddress, string documentUID) external
        onlyByLatestTokenContractVersion
        onlyForActiveUser(userAddress)
        returns(uint)
    {
        require(documentExists(userAddress, documentUID));
        uint idx = _storage.getBytes32Array(keccak256(ROOT_KEY, userAddress, '.document.index')).getArrayItemIndex(documentUID.stringToBytes32());
        assert(idx != uint(-1));
        _storage.deleteInt(keccak256(ROOT_KEY, userAddress, '.document.', documentUID));
        uint numberOfUserDocs = _storage.removeBytes32Array(keccak256(ROOT_KEY, userAddress, '.document.index'), documentUID.stringToBytes32());
        return numberOfUserDocs;
    }

    /*private section*/

    function exists(address _address) private view returns(bool){
        return _storage.getBool(keccak256(ROOT_KEY, _address));
    }

    function active(address userAddress) private view returns(bool){
        return _storage.getBool(keccak256(ROOT_KEY, userAddress, ACTIVE_SUFFIX_KEY));
    }

    function documentExists(address userAddress, string documentUID) private view returns(bool) {
        return _storage.getInt(keccak256(ROOT_KEY, userAddress, '.document.', documentUID)) != 0;
    }

    /*Modifier*/

    modifier onlyForActiveUser(address indexAddress) {
        require (active(indexAddress));
        _;
    }

    modifier onlyByLatestTokenContractVersion() {
        require(_storage.getPermittedContractAddress(ContractType.TOKEN) == msg.sender);
        _;
    }

}
