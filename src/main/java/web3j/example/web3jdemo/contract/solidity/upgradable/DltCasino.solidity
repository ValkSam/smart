pragma solidity ^0.4.23;

import "browser/DltStorage.sol";
import "browser/DltAdmin.sol";
import "browser/Libs.sol";
import "browser/Events.sol";

contract Casino is typeAware, eventRegisterAware {

    string private ROOT_KEY = 'casino.';

    Storage private _storage;

    constructor (address storageContractAddress) public {
        _storage = Storage(storageContractAddress);
        require(msg.sender == _storage.owner());
    }

    /*public*/

    function isLatestVersion() external view
        returns (bool) {
        return _storage.isPermittedContractAddress(address(this));
    }

    function isCasino(address _address) external view
        returns(bool)
    {
        return exists(_address);
    }

    function checkContractType(ContractType contractType) external pure
        returns (bool)
    {
        require(contractType == ContractType.CASINO);
        return true;
    }

    /*admin permission*/

    function register(address casinoAddress, string details) external
        onlyByAdmin
    {
        require(!exists(casinoAddress));
        _storage.setBool(keccak256(ROOT_KEY, casinoAddress), true);
        uint numberOfCasinos = _storage.pushAddressArray(keccak256(ROOT_KEY, '.index'), casinoAddress);

        emit Register(
            TransactionType.REGISTER_CASINO,
            casinoAddress,
            numberOfCasinos,
            details
        );
    }

    /*token permissions*/

    function balanceOf(address casinoAddress) external view
        onlyByLatestTokenContractVersion
        returns(int)
    {
        require(exists(casinoAddress));
        return _storage.getInt(keccak256(ROOT_KEY, casinoAddress, '.balance'));
    }

    function balanceChange(address casinoAddress, int amount) external
        onlyByLatestTokenContractVersion
    {
        require(exists(casinoAddress));
        bytes32 key = keccak256(ROOT_KEY, casinoAddress, '.balance');
        int currentBalance = _storage.getInt(key);
        int newBalance = currentBalance + amount;
        require(newBalance >= 0);
        _storage.setInt(key, newBalance);
    }

    /*private section*/

    function exists(address _address) private view returns(bool){
        return _storage.getBool(keccak256(ROOT_KEY, _address));
    }

    /*Modifier*/

    modifier onlyByAdmin() {
        if (msg.sender != _storage.owner()) {
            address adminAddress = _storage.getPermittedContractAddress(ContractType.ADMIN);
            Admin admin = Admin(adminAddress);
            require (admin.isAdmin(msg.sender));
        }
        _;
    }

    modifier onlyByLatestTokenContractVersion() {
        require(_storage.getPermittedContractAddress(ContractType.TOKEN) == msg.sender);
        _;
    }

}