pragma solidity ^0.4.23;

import "browser/DltStorage.sol";
import "browser/DltAdmin.sol";
import "browser/Libs.sol";
import "browser/Events.sol";

contract Casino is typeAware {

    string private ROOT_KEY = 'casino.';

    Storage private _storage;

    constructor (address storageContractAddress) public {
        _storage = Storage(storageContractAddress);
        require(msg.sender == _storage.owner());
    }

    /*public*/

    function isLatestVersion() external view
        returns (bool) {
        return _storage.isPermittedContractAddress(address(this));
    }

    function isCasino(address _address) external view
        returns(bool)
    {
        return exists(_address);
    }

    /*token permissions*/

    function register(address casinoAddress) external
        onlyByLatestTokenContractVersion
        returns (uint)
    {
        require(!exists(casinoAddress));
        _storage.setBool(keccak256(ROOT_KEY, casinoAddress), true);
        _storage.pushAddressArray(keccak256(ROOT_KEY, '.index'), casinoAddress);

        _storage.setUint(keccak256(ROOT_KEY, casinoAddress, '.balance'), 0);

        return _storage.getAddressArray(keccak256(ROOT_KEY, '.index')).length;
    }

    /*admin permissions*/

    function balanceOf(address casinoAddress) external view
        onlyByAdmin
        returns(uint)
    {
        require(exists(casinoAddress));
        return _storage.getUint(keccak256(ROOT_KEY, casinoAddress, '.balance'));
    }

    function balanceChange(address casinoAddress, uint amount) external
        onlyByAdmin
    {
        require(exists(casinoAddress));
        bytes32 key = keccak256(ROOT_KEY, casinoAddress, '.balance');
        uint currentBalance = _storage.getUint(key);
        uint newBalance = currentBalance + amount;
        require(newBalance >= 0);
        _storage.setUint(key, newBalance);
    }

    /*private section*/

    function exists(address _address) private view returns(bool){
        return _storage.getBool(keccak256(ROOT_KEY, _address));
    }

    /*Modifier*/

    modifier onlyByAdmin() {
        address adminAddress = _storage.getPermittedContractAddress(ContractType.ADMIN);
        Admin admin = Admin(adminAddress);
        require (admin.isAdmin(msg.sender));
        _;
    }

    modifier onlyByLatestTokenContractVersion() {
        require(_storage.getPermittedContractAddress(ContractType.TOKEN) == msg.sender);
        _;
    }

}