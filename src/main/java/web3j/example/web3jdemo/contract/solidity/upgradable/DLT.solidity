pragma solidity ^0.4.23;

import "browser/Libs.sol";
import "browser/Events.sol";
import "browser/DltAdmin.sol";
import "browser/DltCasino.sol";
import "browser/DltUser.sol";

contract DLT_5 is eventRegisterAware, eventTransferAware, eventExchangeAware, eventMintAware, eventRegisterDocumentAware {

    Admin admin;

    Casino casino;

    User user;


    constructor (address adminContractAddress,
        address casinoContractAddress,
        address userContractAddress) public {
        admin = Admin(adminContractAddress);
        casino = Casino(casinoContractAddress);
        user = User(userContractAddress);
    }

    function registerAdmin(address adminAddress, string details) external {
        uint numberOfAdmins = admin.register(adminAddress);

        emit Register(
            TransactionType.REGISTER_ADMIN,
            adminAddress,
            numberOfAdmins,
            details
        );
    }

    function registerCasino(address casinoAddress, string details) external {
        uint numberOfCasinos = casino.register(casinoAddress);

        emit Register(
            TransactionType.REGISTER_CASINO,
            casinoAddress,
            numberOfCasinos,
            details
        );
    }

    function registerUser(address userAddress, address active, address passive, string details) external {
        uint numberOfUsers = user.register(userAddress, active, passive);

        emit Register(
            TransactionType.REGISTER_USER,
            userAddress,
            numberOfUsers,
            details
        );
    }

    function registerEnrollRequestDocument(address userAddress, uint amount, string documentUID, string details) external {
        require(amount > 0);

        user.addDocument(userAddress, documentUID, amount);

        emit RegisterDocument(
            TransactionType.ENROLL_REQUEST,
            userAddress,
            documentUID,
            amount,
            details);
    }

    function cancelEnrollRequestDocument(address userAddress, uint amount, string documentUID, string details) external {
        user.removeDocument(userAddress, documentUID);

        emit RegisterDocument(
            TransactionType.CANCEL_ENROLL_REQUEST,
            userAddress,
            documentUID,
            amount,
            details);
    }

    function registerWithdrawRequestDocument(address userAddress, uint amount, string documentUID, string details) external {
        require(amount > 0);

        user.addDocument(userAddress, documentUID, amount);

        user.balanceChange(userAddress, (-amount));
        user.balanceReservedChange(userAddress, amount);

        emit RegisterDocument(
            TransactionType.WITHDRAW_REQUEST,
            userAddress,
            documentUID,
            amount,
            details);
    }

    function enroll(address userAddress, uint amount, string documentUID, string details) external {
        require(amount > 0);

        user.removeDocument(userAddress, documentUID);

        user.balanceChange(userAddress, amount);

        emit Mint(
            TransactionType.ENROLL,
            userAddress,
            user.account(userAddress),
            amount,
            documentUID,
            details);
    }

    function withdraw(address userAddress, uint amount, string documentUID, string details) external {
        require(amount > 0);

        user.removeDocument(userAddress, documentUID);

        user.balanceReservedChange(userAddress, (-amount));

        emit Burn(
            TransactionType.WITHDRAW,
            userAddress,
            user.passiveAccount(userAddress),
            amount,
            documentUID,
            details);
    }


    function transferCoin(address senderUserAddress, address receiverUserAddress, uint amount, string details) external {
        require(amount > 0);

        user.balanceChange(senderUserAddress, (-amount));
        user.balanceChange(receiverUserAddress, amount);

        emit Transfer(
            TransactionType.TRANSFER,
            senderUserAddress,
            receiverUserAddress,
            amount,
            details);
    }

    function depositCoin(address userAddress, address casinoAddress, uint amount, string documentUID, string details) public
        onlyByAdmin
        onlyForActiveUser(userAddress)
        onlyForExistedCasino(casinoAddress)
    {
        require(amount > 0);
        require(user.balanceOf(userAddress) >= amount);

        casino.balanceChange(casinoAddress, amount);
        user.balanceChange(userAddress, (-amount));

        emit Exchange(
            TransactionType.DEPOSIT,
            userAddress,
            user.account(userAddress),
            casinoAddress,
            amount,
            documentUID,
            details);
    }

    function takeCoin(address userAddress, address casinoAddress, uint amount, string documentUID, string details) public
        onlyByUser(userAddress)
        onlyForActiveUser(userAddress)
        onlyForExistedCasino(casinoAddress)
    {
        require(amount > 0);
        require(casino.balanceOf(casinoAddress) >= amount);

        casino.balanceChange(casinoAddress, (-amount));
        user.balanceChange(userAddress, amount);

        emit Exchange(
            TransactionType.TAKE,
            userAddress,
            casinoAddress,
            user.account(userAddress),
            amount,
            documentUID,
            details);
    }

    modifier onlyForExistedCasino(address casinoAddress) {
        require(casino.exists(casinoAddress));
        _;
    }

    modifier onlyByAdmin() {
        require (admin.isAdmin(msg.sender));
        _;
    }

    modifier onlyByUser(address userAddress) {
        require (msg.sender == userAddress);
        _;
    }

    modifier onlyByUserOrAdmin(address userAddress) {
        if (msg.sender == userAddress) {
            require(user.exists(userAddress));
            require (user.isActive(userAddress));
        } else {
            require(admin.isAdmin(msg.sender));
        }
        _;
    }

}
